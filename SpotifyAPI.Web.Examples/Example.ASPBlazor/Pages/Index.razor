@page "/"
@inject NavigationManager navManager
@inject IJSRuntime JSRuntime

@using SpotifyAPI.Web



@if (_isAuthed && _me != null)
{
    <h2>Welcome @_me.DisplayName!</h2>
    <p>
        You have a grant total of @_totalPlaylistCount playlists!
    </p>
    <p>Playlists</p>

    @foreach (var _item in _playlists.Items)
    {

        <p @ref=reference style="cursor:pointer" @onclick="@(e=>PlaylistClicked(@_item.Id))">@_item.Name </p>


        {
  
            <ol @ref=reference style="display:none" id="@_item.Id" type="1">
                @foreach (var _track in tracks)
                {
                    @if (_track.id == _item.Id)
                    {
                      string open = string.Empty;
                      if (@_track.track.ExternalUrls.Count > 0)
                      {
                        open =  @_track.track.ExternalUrls.First().Value ;
                      }
                        <li style="cursor:pointer" @onclick="@(e=>NavigateToNewTab(open))"> @_track.track.Name : @_track.track.Artists.First().Name</li>
                    }
                }
            </ol>
     
        }
    }

}
else
{
    <span>To get started:</span>
    <a href="@_authUri">
        Login via Spotify
    </a>
}


<hr />

@code {

    ElementReference reference;

    private struct tracklist
    {

      public string id;
      public string playlistname;
      public FullTrack track;
    }

    private Uri _authUri;

    private bool _isAuthed;

    private PrivateUser _me;

    private Paging<SimplePlaylist> _playlists;

    private int? _totalPlaylistCount;

    private SpotifyClient spotify;

    private List<tracklist> tracks = new List<tracklist>();

    bool showModal = false;

    void ModalShow() => showModal = true;
    void ModalCancel() => showModal = false;
    void ModalOk()
    {
      Console.WriteLine("Modal ok");
      showModal = false;
    }

    private async Task PlaylistClicked(string playlistid)
    {
      await JSRuntime.InvokeVoidAsync("window.exampleJsFunctions.displayElement", playlistid);
    }

    public async Task NavigateToNewTab(string url)
    {
      
      await JSRuntime.InvokeAsync<object>("open", url, "_blank");
    }



    protected override void OnInitialized()
    {
      var clientId = Environment.GetEnvironmentVariable("SPOTIFY_CLIENT_ID");
      var baseUri = navManager.ToAbsoluteUri(navManager.BaseUri);

      var loginRequest = new LoginRequest(baseUri, clientId, LoginRequest.ResponseType.Token)
      {
        Scope = new[] { Scopes.PlaylistReadPrivate, Scopes.PlaylistReadCollaborative }
      };
      _authUri = loginRequest.ToUri();
    }

    protected override async Task OnInitializedAsync()
    {
      int offset = 0;
      var uri = new Uri(navManager.Uri);
      var maxLen = Math.Min(1, uri.Fragment.Length);
      Dictionary<string, string> fragmentParams = uri.Fragment.Substring(maxLen)?
        .Split("&", StringSplitOptions.RemoveEmptyEntries)?
        .Select(param => param.Split("=", StringSplitOptions.RemoveEmptyEntries))?
        .ToDictionary(param => param[0], param => param[1]) ?? new Dictionary<string, string>();

      _isAuthed = fragmentParams.ContainsKey("access_token");
      if (_isAuthed)
      {
        spotify = new SpotifyClient(fragmentParams["access_token"]);

        _me = await spotify.UserProfile.Current();
        _totalPlaylistCount = (await spotify.Playlists.CurrentUsers()).Total;

        _playlists = await spotify.Playlists.CurrentUsers(new PlaylistCurrentUsersRequest
        {
          Limit = _totalPlaylistCount,
          Offset = 0
        });

        foreach (var _playlist in _playlists.Items)

        {
          offset = 0;

          var playlisttracks = await spotify.Playlists.GetItems(_playlist.Id, new PlaylistGetItemsRequest
          {
            Offset = offset,
            Limit = 100
          });

          var nexturl = playlisttracks.Next;

          while (nexturl != null)
          {
            offset += 100;
            //Get next list
            var nextitems = await spotify.Playlists.GetItems(_playlist.Id, new PlaylistGetItemsRequest
            {
              Offset = offset,
              Limit = 100
            });

            playlisttracks.Items.AddRange(nextitems.Items);
            nexturl = nextitems.Next;


          }

          foreach (PlaylistTrack<IPlayableItem> _track in playlisttracks.Items)
          {

            if (_track.Track is FullTrack track)
            {

              tracks.Add(new tracklist
              {
                id = _playlist.Id,
                playlistname = _playlist.Name,
                track = track
              }

              );

            }


          }
        }









      }
    }
}
